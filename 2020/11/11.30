1. 本来说周末把方法部分写完，但周末做了个实验验证了一下另一种思路，所以拖延了。
   主要就是验证一下到底是我的随机响应好还是给输出加噪声的方法好，为了实现后面的方法由花时间看了下差分隐私随机梯度下降的源码，
   搞懂了梯度裁剪是怎么实现的，发现不是想象中的直接对大小进行限制，而是用一个缩放因子实现的，这个有机会以后可以组会说下。

   然后实现第二个方法的过程中发现，加噪声的方法不适合用在输出扰动上，或者说不能用在本地差分隐私的输出扰动上。
   因为噪声实在是太大了，从聚合后的伪标签准确度进行一个对比，二者的隐私损失相同，分别测试了100到500参与者下的标签准确度：

   随机响应       噪声
   9860/10000    4331/10000
   9977/10000    5543/10000
   9987/10000    6318/10000 
   9987/10000    6911/10000
                 7370/10000

   可以看到随机响应的实现很容易就保证了标签的准确度，而添加噪声的方法对准确度的影响很大，主要是因为如果直接添加噪声，那么
   噪声值几乎和真实值差不多大，数据失真严重。而这个方法之所以在差分隐私随机梯度下降行得通是因为他用了子采样，而如果在输出扰动
   上用子采样，就会导致无法聚合，因为同一个输出，有的人采样到了，有的人没采样到。我这里用了一个padding的方法，即没采样到的就
   输出噪声，采样到的就输出真实值+噪声，于是就成了上面的样子，虽然随着参与者的增加，准确度不断上升，但可以看到上升幅度越来越小。

   之前一直担心我的实现是有问题的，但现在看，虽然有局限性（只能用在分类上），但也是一个比较好的解决方法。因为只要控制住随机响应的
   概率间距（即扰动到其他值的概率和保持不变的概率差，如45%不变，10%变成其余任何一个值，那么这个间距就是35%），那么在预测准确的情况下，
   随着参与者的增加，最后的聚合结果势必显现出这种概率分布，从而可以准确的确定一个样本的标签。
   